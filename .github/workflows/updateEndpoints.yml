name: Update endpoints on webApi

on:
  push:
    branches:
      - main

jobs:
  Encode_yaml_to_base64:
    runs-on: ubuntu-latest
    steps:
    - name: Encode file
      run: |
        var=$(echo 'Hello world' | base64)
        echo $var
    - name: Update endpoints
      run: |
        curl --location --request POST 'https://www.csast.csas.cz/sys/webapi/v3/admin/backends/agapjhsqq2j3myrfo1wpown2i0/import' \
        --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c3IiOiJkYTVkOWVkOC1hOTdlLTRlZWUtOGRiOS1mZDg1ODVmZTUwMTMiLCJqdGkiOiJleTBkdzRhNGJyajRmaXlyc2N1YWt6ZndxYSJ9.-F98WP_eUK4ko0iJ_hTZ7vUrN0NX11LePJlsQgU8NfU' \
        --header 'Content-Type: application/json' \
        --data-raw '{
         "type": "OPEN_API",
         "data": ""
        }'
        
  

